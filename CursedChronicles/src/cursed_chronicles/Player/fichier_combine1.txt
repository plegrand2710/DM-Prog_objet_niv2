===== Characteristic.java =====
package cursed_chronicles.Player;

public class Characteristic {
    private String name;
    private int value;

    public Characteristic(String name, int value) {
        this.name = name;
        this.value = value;
    }

    public String getName() {
        return name;
    }

    public int getValue() {
        return value;
    }

    public void setValue(int value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return name + ": " + value;
    }
}
---------------------------

===== Inventory.java =====
package cursed_chronicles.Player;

import java.util.ArrayList;

public class Inventory {
    private ArrayList<Item> items;

    public Inventory() {
        this.items = new ArrayList<>();
    }

    public void addItem(Item item) {
        items.add(item);
    }

    public void removeItem(String itemName) {
        items.removeIf(item -> item.getName().equalsIgnoreCase(itemName));
    }

    public boolean hasItem(String itemName) {
        return items.stream().anyMatch(item -> item.getName().equalsIgnoreCase(itemName));
    }

    public Item getItem(String itemName) {
        return items.stream()
                .filter(item -> item.getName().equalsIgnoreCase(itemName))
                .findFirst()
                .orElse(null);
    }

    public ArrayList<Item> getItems() {
        return new ArrayList<>(items);
    }

    public void displayInventory() {
        if (items.isEmpty()) {
            System.out.println("Your inventory is empty.");
        } else {
            System.out.println("Inventory:");
            for (Item item : items) {
                System.out.println("- " + item.getName() + ": " + item.getDescription());
            }
        }
    }
}
---------------------------

===== InventoryPanel.java =====
package cursed_chronicles.Player;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class InventoryPanel extends JFrame {
    private DefaultListModel<String> itemListModel;
    private JList<String> itemList;

    public InventoryPanel() {
        setTitle("🎒 Inventory");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        setLayout(new BorderLayout());

        itemListModel = new DefaultListModel<>();
        itemList = new JList<>(itemListModel);
        add(new JScrollPane(itemList), BorderLayout.CENTER);
    }

    public void updateInventory(ArrayList<Item> items) {
        itemListModel.clear();
        for (Item item : items) {
            itemListModel.addElement(item.getName() + " - " + item.getDescription());
        }
    }

    public void showInventory() {
        setVisible(true);
    }
}
---------------------------

===== Item.java =====
package cursed_chronicles.Player;
import java.util.ArrayList;

public class Item {
    private String name;
    private String description;
    private ArrayList<Characteristic> characteristics;

    public Item(String name, String description) {
        this.name = name;
        this.description = description;
        this.characteristics = new ArrayList<>();
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public ArrayList<Characteristic> getCharacteristics() {
        return new ArrayList<>(characteristics);
    }

    public void addCharacteristic(Characteristic characteristic) {
        characteristics.add(characteristic);
    }

    public void removeCharacteristic(String characteristicName) {
        characteristics.removeIf(c -> c.getName().equalsIgnoreCase(characteristicName));
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(name + " - " + description + "\nCharacteristics:\n");
        for (Characteristic c : characteristics) {
            sb.append("- ").append(c).append("\n");
        }
        return sb.toString();
    }
}
---------------------------

===== ItemPanel.java =====
package cursed_chronicles.Player;

import javax.swing.*;
import java.awt.*;

public class ItemPanel extends JFrame {
    private JLabel titleLabel;
    private JTextArea characteristicsArea;

    public ItemPanel(Item item) {
        setTitle("Item Details");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        titleLabel = new JLabel("🔹 " + item.getName());
        characteristicsArea = new JTextArea();
        characteristicsArea.setEditable(false);

        for (Characteristic c : item.getCharacteristics()) {
            characteristicsArea.append(c.getName() + ": " + c.getValue() + "\n");
        }

        add(titleLabel, BorderLayout.NORTH);
        add(new JScrollPane(characteristicsArea), BorderLayout.CENTER);
    }
}
---------------------------

===== Journal.java =====
package cursed_chronicles.Player;

import java.util.ArrayList;

public class Journal {
    private ArrayList<String> entries;

    public Journal() {
        this.entries = new ArrayList<>();
    }

    public void addEntry(String entry) {
        entries.add(entry);
    }

    public ArrayList<String> getEntries() {
        return new ArrayList<>(entries);
    }

    public void displayJournal() {
        if (entries.isEmpty()) {
            System.out.println("The journal is empty.");
        } else {
            System.out.println("Player Journal:");
            for (String entry : entries) {
                System.out.println("- " + entry);
            }
        }
    }
}
---------------------------

===== JournalPanel.java =====
package cursed_chronicles.Player;

import javax.swing.*;
import java.awt.*;

public class JournalPanel extends JFrame {
    private DefaultListModel<String> journalModel;
    private JList<String> journalList;

    public JournalPanel() {
        setTitle("📖 Player Journal");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        setLayout(new BorderLayout());

        journalModel = new DefaultListModel<>();
        journalList = new JList<>(journalModel);
        add(new JScrollPane(journalList), BorderLayout.CENTER);
    }

    public void addEntry(String entry) {
        journalModel.addElement(entry);
    }

    public void showJournal() {
        setVisible(true);
    }
}
---------------------------

===== Player.java =====
package cursed_chronicles.Player;

import java.util.ArrayList;

public class Player {
    private String name;
    private int positionX;
    private int positionY;
    private int level;
    private int experiencePoints;
    private Inventory inventory;
    private ArrayList<Characteristic> characteristics;
    private Journal journal;

    private String direction;  
    private boolean isMoving; 

    public Player(String name) {
        this.name = name;
        this.positionX = 0;
        this.positionY = 0;
        this.level = 1;
        this.experiencePoints = 0;
        this.inventory = new Inventory();
        this.characteristics = new ArrayList<>();
        this.journal = new Journal();
        this.direction = "down";
        this.isMoving = false;

        initializeDefaultCharacteristics();
    }

    private void initializeDefaultCharacteristics() {
        characteristics.add(new Characteristic("Strength", 5));
        characteristics.add(new Characteristic("Defense", 5));
        characteristics.add(new Characteristic("Agility", 5));
        characteristics.add(new Characteristic("Intelligence", 5));
    }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public int getPositionX() { return positionX; }
    public void setPositionX(int positionX) { this.positionX = positionX; }

    public int getPositionY() { return positionY; }
    public void setPositionY(int positionY) { this.positionY = positionY; }

    public int getLevel() { return level; }
    public void setLevel(int level) { this.level = level; }

    public int getExperiencePoints() { return experiencePoints; }
    public void setExperiencePoints(int experiencePoints) { this.experiencePoints = experiencePoints; }

    public Inventory getInventory() { return inventory; }
    public void setInventory(Inventory inventory) { this.inventory = inventory; }

    public ArrayList<Characteristic> getCharacteristics() { return new ArrayList<>(characteristics); }
    public void setCharacteristics(ArrayList<Characteristic> characteristics) { this.characteristics = characteristics; }

    public Journal getJournal() { return journal; }
    public void setJournal(Journal journal) { this.journal = journal; }

    public String getDirection() { return direction; }
    public void setDirection(String direction) { this.direction = direction; }

    public boolean isMoving() { return isMoving; }
    public void setMoving(boolean moving) { isMoving = moving; }

    public void move(String direction, int dx, int dy) {
        this.direction = direction;
        this.positionX += dx;
        this.positionY += dy;
        this.isMoving = true;
        journal.addEntry("Moved " + direction + " to (" + positionX + ", " + positionY + ").");
    }

    public void stopMoving() {
        this.isMoving = false;
    }
}
---------------------------

===== PlayerController.java =====
package cursed_chronicles.Player;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class PlayerController implements KeyListener {
    private Player player;
    private PlayerView playerView;

    public PlayerController(Player player, PlayerView playerView) {
        this.player = player;
        this.playerView = playerView;
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int dx = 0, dy = 0;
        String direction = player.getDirection();

        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP:    direction = "up"; dy = -1; break;
            case KeyEvent.VK_DOWN:  direction = "down"; dy = 1; break;
            case KeyEvent.VK_LEFT:  direction = "left"; dx = -1; break;
            case KeyEvent.VK_RIGHT: direction = "right"; dx = 1; break;
        }

        if (dx != 0 || dy != 0) {
            player.move(direction, dx, dy);
            playerView.updateView(); // Met à jour l'affichage
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        player.stopMoving(); // Arrête l’animation quand la touche est relâchée
    }

    @Override
    public void keyTyped(KeyEvent e) {}
}
---------------------------

===== PlayerPanel.java =====
package cursed_chronicles.Player;

import javax.swing.*;
import java.awt.*;

public class PlayerPanel extends JFrame {
    private JLabel nameLabel, levelLabel, xpLabel;
    private JTextArea characteristicsArea;
    private InventoryPanel inventoryPanel;
    private JournalPanel journalPanel;

    public PlayerPanel(Player player, InventoryPanel inventory, JournalPanel journal) {
        setTitle("👤 Player Info");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        setLayout(new BorderLayout());

        nameLabel = new JLabel("Player: " + player.getName());
        levelLabel = new JLabel("⭐ Level: " + player.getLevel());
        xpLabel = new JLabel("🔹 XP: " + player.getExperiencePoints());

        characteristicsArea = new JTextArea();
        characteristicsArea.setEditable(false);
        updateCharacteristics(player);

        JPanel topPanel = new JPanel(new GridLayout(3, 1));
        topPanel.add(nameLabel);
        topPanel.add(levelLabel);
        topPanel.add(xpLabel);

        add(topPanel, BorderLayout.NORTH);
        add(new JScrollPane(characteristicsArea), BorderLayout.CENTER);

        inventoryPanel = inventory;
        journalPanel = journal;
    }

    public void updateCharacteristics(Player player) {
        characteristicsArea.setText("🛡️ Characteristics:\n");
        for (Characteristic c : player.getCharacteristics()) {
            characteristicsArea.append(c.getName() + ": " + c.getValue() + "\n");
        }
    }

    public void showPlayerInfo() {
        setVisible(true);
    }
}
---------------------------

===== PlayerView.java =====
package cursed_chronicles.Player;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;

public class PlayerView extends JPanel {
    private Player player;
    private HashMap<String, Image[]> sprites;  // Stocke les différentes animations
    private int frameIndex = 0;  // Pour animer le joueur

    public PlayerView(Player player) {
        this.player = player;
        this.sprites = new HashMap<>();
        loadSprites();
        setPreferredSize(new Dimension(640, 640));
    }

    private void loadSprites() {
        // Charger les images pour chaque direction
        sprites.put("down", new Image[]{
            new ImageIcon("assets/frame_1.png").getImage(),
            new ImageIcon("assets/frame_2.png").getImage()
        });

        sprites.put("up", new Image[]{
            new ImageIcon("assets/frame_3.png").getImage(),
            new ImageIcon("assets/frame_4.png").getImage()
        });

        sprites.put("left", new Image[]{
            new ImageIcon("assets/frame_5.png").getImage(),
            new ImageIcon("assets/frame_2.png").getImage()
        });

        sprites.put("right", new Image[]{
            new ImageIcon("assets/frame_3.png").getImage(),
            new ImageIcon("assets/frame_4.png").getImage()
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Sélectionner la bonne animation en fonction du mouvement
        String direction = player.getDirection();
        Image[] frames = sprites.get(direction);
        Image currentFrame = frames[frameIndex];

        // Dessiner le joueur
        g.drawImage(currentFrame, player.getPositionX() * 64, player.getPositionY() * 64, 64, 64, this);
    }

    public void updateView() {
        frameIndex = (frameIndex + 1) % 2; // Alterne entre deux frames pour animer
        repaint();
    }
}
---------------------------

